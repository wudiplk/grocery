// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:grocery/main/home/tian_qi_entity.dart';
import 'package:grocery/generated/json/tian_qi_entity_helper.dart';
import 'package:grocery/main/home/picture_entity.dart';
import 'package:grocery/generated/json/picture_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case TianQiEntity:
				return tianQiEntityFromJson(data as TianQiEntity, json) as T;
			case TianQiData:
				return tianQiDataFromJson(data as TianQiData, json) as T;
			case PictureEntity:
				return pictureEntityFromJson(data as PictureEntity, json) as T;
			case PictureData:
				return pictureDataFromJson(data as PictureData, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TianQiEntity:
				return tianQiEntityToJson(data as TianQiEntity);
			case TianQiData:
				return tianQiDataToJson(data as TianQiData);
			case PictureEntity:
				return pictureEntityToJson(data as PictureEntity);
			case PictureData:
				return pictureDataToJson(data as PictureData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TianQiEntity).toString()){
			return TianQiEntity().fromJson(json);
		}
		if(type == (TianQiData).toString()){
			return TianQiData().fromJson(json);
		}
		if(type == (PictureEntity).toString()){
			return PictureEntity().fromJson(json);
		}
		if(type == (PictureData).toString()){
			return PictureData().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<TianQiEntity>[] is M){
			return data.map<TianQiEntity>((e) => TianQiEntity().fromJson(e)).toList() as M;
		}
		if(<TianQiData>[] is M){
			return data.map<TianQiData>((e) => TianQiData().fromJson(e)).toList() as M;
		}
		if(<PictureEntity>[] is M){
			return data.map<PictureEntity>((e) => PictureEntity().fromJson(e)).toList() as M;
		}
		if(<PictureData>[] is M){
			return data.map<PictureData>((e) => PictureData().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}